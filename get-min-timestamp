#!/usr/bin/env python3

# Copyright (C) 2024 by its authors (See AUTHORS).  Licensed under the
# EUPL-1.2 or later.  See LICENSE for the exact licensing conditions.

import argparse
import re

search_params = {"overlay" :
                 {"search_expr": "Systime: ([0-9:.-]+); "
                                   "Latency: ([0-9:.-]+); "
                                   "Frame-id: ([0-9]+)",
                  "systime_col": 0,
                  "latency_col": 1},
                 "rtp" :
                 {"search_expr": r" ".join(5 * [r"(\b[0-9:.-]+\b)"]),
                  "systime_col": 1}}

def get_min_timestamp(in_file, params):
    latency_col = params.get("latency_col")
    if latency_col:
        systimes = [
            int(re.search(params["search_expr"],
                          line.rstrip()).groups()[params["systime_col"]]) -
            int(re.search(params["search_expr"],
                          line.rstrip()).groups()[latency_col])
            for line in in_file
            if re.search(params["search_expr"], line) is not None]
    else:
        systimes = [
            int(re.search(params["search_expr"],
                          line.rstrip()).groups()[params["systime_col"]])
            for line in in_file
            if re.search(params["search_expr"], line) is not None]

    if systimes:
        return min(systimes)

if __name__ == "__main__":
  parser = argparse.ArgumentParser()
  parser.add_argument('--overlay-infile',
                      dest="overlay_infile",
                      required=True,
                      type=argparse.FileType('r'),
                      help="Path to the log file generated by the "
                      "timeoverlayparse GStreamer element")
  parser.add_argument('--rtp-infile',
                      dest="rtp_infile",
                      required=True,
                      type=argparse.FileType('r'),
                      help="Path to the log file generated by the "
                      "RTP timestamp collector")

  args = parser.parse_args()

  try:
      min_ts = min(
          [ts for ts in
           [get_min_timestamp(args.overlay_infile, search_params["overlay"]),
        get_min_timestamp(args.rtp_infile, search_params["rtp"])]
           if ts is not None])

      print(min_ts)
  except ValueError:
      pass

