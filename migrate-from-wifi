#!/bin/bash

# Copyright (C) 2024 by its authors (See AUTHORS).  Licensed under the
# EUPL-1.2 or later.  See LICENSE for the exact licensing conditions.

# Default values

ifname=wlan0
interval=0.5
threshold=50

# ========================================================================

function get_ip_addresses () {
    # If ifname is not given, show all addresses
    ifname=$1

    ip --json a show $ifname | \
        jq -r -C '.[] | select(.link_type!="loopback")
                      | .addr_info[] | select(.family=="inet")
                      | .local'
}

# ========================================================================

# Parse CLI args, https://stackoverflow.com/a/14203146
POSITIONAL_ARGS=()
while [[ $# -gt 0 ]]; do
    case $1 in
        -a|--addr)
            addr="$2"
            shift
            ;;
        -h|--help)
            usage=yes
            shift
            ;;
        -i|--interface)
            ifname="$2"
            shift 2
            ;;
        -n|--interval)
            interval="$2"
            shift 2
            ;;
        --test)
            test=yes
            shift
            ;;
        -t|--threshold)
            threshold="$2"
            shift 2
            ;;
        -*|--*)
            echo "Unknown option $1"
            exit 1
            ;;
        *)
            POSITIONAL_ARGS+=("$1") # save positional arg
            shift # past argument
            ;;
    esac
done
set -- "${POSITIONAL_ARGS[@]}" # restore positional parameters

# ========================================================================

if [ "$usage" == "yes" ]; then
    echo Usage: $(basename $0) [options]
    cat <<-EOF
 -a, --addr ADDR        Ip addr to migrate to
 -h, --help             Display this help
 -i, --interface IFNAME Watch interface IFNAME (default: wlan0)
 -n, --interval TIME    Sleep TIME after querying the device
     --test             Artificially decrease quality more and more
 -t, --threshold T      Migrate if wireless quality is less than T. (0<T<100)
EOF
    exit 0
fi

if [ -z "$addr" ]; then
    if_addr=$(get_ip_addresses $ifname)
    if [ -z "$if_addr" ]; then
        echo "Cannot figure out the address of $ifname.  Use --interface"
        exit 1
    fi
    echo $ifname: $if_addr
    for candidate in $(get_ip_addresses); do
        if [ "$if_addr" != "$candidate" ]; then
            addr="$candidate"
            break
        fi
    done
    if [ -z "$addr" ]; then
        echo "Cannnot figure out where to migrate.  Use --addr"
        exit 1
    fi
fi
echo "Migrating to $addr if quality < $threshold"

i=0
while true; do
    info=$(grep ^"$ifname": /proc/net/wireless)
    set -- $info
    quality=${3%.*} # math.floor
    if [ "$test" == yes ]; then
        quality=$(( $quality - $i ))
        i=$(($i + 1))
    fi
    echo -ne "\rquality: $quality"
    if [ "$quality" -lt "$threshold" ]; then
        echo
        echo "$quality < $threshold: migrating"
        qdbus --literal org.freedesktop.gst /quic \
              org.freedesktop.gst.Rebind "$addr:5002"
        exit
    fi
    sleep $interval
done
